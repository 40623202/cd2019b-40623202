var tipuesearch = {"pages": [{'title': '簡介', 'text': '本網站為 期末個人網站。 \n 我在分組工作中主要負責執行規劃的部份。 \n 個人倉儲: https://github.com/40623202/cd2019b-40623202 \n 第二組分組倉儲: https://github.com/mdekmol/cd2019b-task1-2019cdb_t1_g2 \n', 'tags': '', 'url': '簡介.html'}, {'title': '手足球V-rep基本模擬', 'text': '手足球的基本模擬練習。 \n 手足球模擬基本操作影片 \n 1. 手足球模擬基本操作練習 \n \n 2. 手足球基本組裝練習 \n \n 3. 手足球模擬內部勾選 \n \n', 'tags': '', 'url': '手足球V-rep基本模擬.html'}, {'title': '每週進度', 'text': '\n \n \n 第十週(2019/04/26) \n 各組期末報告說明。 \n \n \n 第十一週( 2019/05/03) \n \n 1. 本週確定分配任務，而我主要負責手足球求模擬執行規劃，與組員進行初步規畫討論。 \n 2. 對全班期末倉儲進行fork，並了解pull request的使用方式。 \n \n \n \n 第十二週 ( 2019/05/10) \n \n 1. 規劃手足球模擬的進度。 \n 2. 進行手足球基本操作的模擬 ( 影片連結 ) \n \n \n \n 第十三週 ( 2019/05/17) \n \n 1.進行手足球基本操作的模擬 \xa0( 影片連結 ) \n 2.手足球模擬內部勾選 \xa0( 影片連結 ) \n \n \n \n 第十四週 ( 2019/05/24) \n 持續討論及撰寫手足球模擬規劃。 \n \n \n 第十五週 ( 2019/05/31) \n 持續討論及撰寫手足球模擬規劃。 \n \n \n 第十六週 ( 2019/05/03) \n 端午連假，持續討論及撰寫手足球模擬規劃。 \n \n \n 第十七週 ( 2019/06/07) \n \n 1.完成"專案成果摘要"以及"專案執行內容" \n 2.上台報告( 期末心得報告影片 ) \n \n \n \n 第十八週 ( 2019/06/14) \n 期末考週 \n \n \n \n', 'tags': '', 'url': '每週進度.html'}, {'title': '出缺席', 'text': '出缺席表連結 \n', 'tags': '', 'url': '出缺席.html'}, {'title': '期末自我評量', 'text': '期末心得報告影片  \xa0 \n \xa0學員出席 (20%):100 \xa0Github 倉儲管理 (20%):100 Onshape 協同操作 (20%):62 \xa0V-rep 模擬 (20%):63 程式開發 (20%):0 \n 自評分數:65 \n \xa0 \n', 'tags': '', 'url': '期末自我評量.html'}, {'title': '期末測驗-夾娃娃機', 'text': '', 'tags': '', 'url': '期末測驗-夾娃娃機.html'}, {'title': 'onshape繪製', 'text': '娃娃機stl檔案下載點 \n \n 利用分支讓組員們可以分工繪製各零組件，繪製完成後合併到主圖面。 \n \n \n \n \n 我負責繪製娃娃機外殼 \n \n \n \n \n \n 組裝完成的娃娃機 \n \n', 'tags': '', 'url': 'onshape繪製.html'}, {'title': '版本1 - X Y軸作動', 'text': "v-rep檔案下載點 \n 利用方向鍵控制: \n → :Y軸向右移動 \n ←:Y軸向左移動 \n ↓:X軸向前移動 \n ↑:X軸向後移動 \n W:Z軸向上移動 \n S:Z軸向下移動 \n \n 版本1影片: \n \n 版本1程式碼: \n -- model in Solvespace 500 mm = 5000 mm in V-rep\n--[[\nSimulation is 10 times of realistic environment\nfloor in Solvespace 2.5 m x 2.5 m = 25 m x 25 m in V-rep\nball is in Solivespace 1g (0.001) = 0.01 kg in V-rep\nhammer is in Solvespace 0.1 kg (100g) = 1kg in V-rep (0.1 for Inertia)\n]]\n--local joint_r = {'left_joint1','left_joint2','left_joint3','left_joint4',}\nlocal slider_x ='slider_x'\nlocal slider_y ='slider_y'\nlocal slider_z ='slider_z'\n\nthreadFunction=function()\n    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do\n        -- Read the keyboard messages (make sure the focus is on the main window, scene view):\n        message,auxiliaryData=sim.getSimulatorMessage()\n        while message~=-1 do\n            key=auxiliaryData[1]\n            sim.addStatusbarMessage('key:'..key)\n            if (message == sim.message_keypress) then\n                if (auxiliaryData[1]==2007) then\n                    -- up key\n                    if (sliding_y>=0.3)then else sliding_y = sliding_y + 0.005 end  \n                    sim.addStatusbarMessage('sliding_x:'..sliding_x)\n                end\n                if (auxiliaryData[1]==2008)  then\n                    -- down key\n                    if (sliding_y<=-0.3)then else sliding_y = sliding_y - 0.005 end  \n                    sim.addStatusbarMessage('sliding_y:'..sliding_y)\n                end\n                if (auxiliaryData[1]==2010)  then\n                    -- right key \n                    if (sliding_x>=0.3)then else sliding_x = sliding_x + 0.005 end  \n                    sim.addStatusbarMessage('sliding_x:'..sliding_x)\n                end\n                if (auxiliaryData[1]==2009)  then\n                    -- left key\n                    if (sliding_x<=-0.3)then else sliding_x = sliding_x - 0.005 end                   \n                    sim.addStatusbarMessage('sliding_x:'..sliding_x)\n                end\n                if (auxiliaryData[1]==119)  then\n                    -- z-up key \n                    if (sliding_z>=0.3)then else sliding_z = sliding_z + 0.005 end  \n                    sim.addStatusbarMessage('sliding_z:'..sliding_z)\n                end\n                if (auxiliaryData[1]==115)  then\n                    -- z-down key\n                    if (sliding_z<=-0.3)then else sliding_z = sliding_z - 0.005 end  \n                    sim.addStatusbarMessage('sliding_z:'..sliding_z)\n                end\n             end\n                message,auxiliaryData=sim.getSimulatorMessage()\n        end\n            -- We take care of setting the desired hammer position:\n            --sim.setJointForce(joint,torque)\n            sim.setJointTargetPosition(slider_x, sliding_x)\n            sim.setJointTargetPosition(slider_y, sliding_y)\n            sim.setJointTargetPosition(slider_z, sliding_z)\n            --Since this script is threaded, don't waste time here:\n            sim.switchThread() -- Resume the script at next simulation loop start\n    end\n\nend\n-- Put some initialization code here:\n-- Retrieving of some handles and setting of some initial values:\nslider_x=sim.getObjectHandle(slider_x)\nslider_y=sim.getObjectHandle(slider_y)\nslider_z=sim.getObjectHandle(slider_z)\nvelocity=0\nhammer_back=0\ntorque=0\nsliding_x = 0\nsliding_y = 0\nsliding_z = 0\n--orientation=sim.getJointPosition(joint_all_c1, -1)\n-- Here we execute the regular thread code:\nres,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)\nif not res then\n    sim.addStatusbarMessage('Lua runtime error: '..err)\nend\n \n-- Put some clean-up code here: \n", 'tags': '', 'url': '版本1 - X Y軸作動.html'}, {'title': '版本2 - X Y軸作動+開爪', 'text': "v-rep檔案下載點 \n 利用方向鍵控制: \n → :Y軸向右移動 \n ←:Y軸向左移動 \n ↓:X軸向前移動 \n ↑:X軸向後移動 \n W:Z軸向上移動 \n S:Z軸向下移動 \n W:開爪 \n X:合爪 \n 版本2影片:  \n \n 版本2程式碼: \n -- model in Solvespace 500 mm = 5000 mm in V-rep\n--[[\nSimulation is 10 times of realistic environment\nfloor in Solvespace 2.5 m x 2.5 m = 25 m x 25 m in V-rep\nball is in Solivespace 1g (0.001) = 0.01 kg in V-rep\nhammer is in Solvespace 0.1 kg (100g) = 1kg in V-rep (0.1 for Inertia)\n]]\nlocal joint_r = {'joint1','joint2','joint3','joint4',}\nlocal slider_x ='slider_x'\nlocal slider_y ='slider_y'\nlocal slider_z ='slider_z'\n\nthreadFunction=function()\n    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do\n        -- Read the keyboard messages (make sure the focus is on the main window, scene view):\n        message,auxiliaryData=sim.getSimulatorMessage()\n        while message~=-1 do\n            key=auxiliaryData[1]\n            sim.addStatusbarMessage('key:'..key)\n            if (message == sim.message_keypress) then\n                if (auxiliaryData[1]==2007) then\n                    -- up key\n                    if (sliding_y>=0.3)then else sliding_y = sliding_y + 0.005 end  \n                    sim.addStatusbarMessage('sliding_x:'..sliding_x)\n                end\n                if (auxiliaryData[1]==2008)  then\n                    -- down key\n                    if (sliding_y<=-0.3)then else sliding_y = sliding_y - 0.005 end  \n                    sim.addStatusbarMessage('sliding_y:'..sliding_y)\n                end\n                if (auxiliaryData[1]==2010)  then\n                    -- right key \n                    if (sliding_x>=0.3)then else sliding_x = sliding_x + 0.005 end  \n                    sim.addStatusbarMessage('sliding_x:'..sliding_x)\n                end\n                if (auxiliaryData[1]==2009)  then\n                    -- left key\n                    if (sliding_x<=-0.3)then else sliding_x = sliding_x - 0.005 end                   \n                    sim.addStatusbarMessage('sliding_x:'..sliding_x)\n                end\n                if (auxiliaryData[1]==119)  then\n                    -- z-up key \n                    if (sliding_z>=0.3)then else sliding_z = sliding_z + 0.005 end  \n                    sim.addStatusbarMessage('sliding_z:'..sliding_z)\n                end\n                if (auxiliaryData[1]==115)  then\n                    -- z-down key\n                    if (sliding_z<=-0.3)then else sliding_z = sliding_z - 0.005 end  \n                    sim.addStatusbarMessage('sliding_z:'..sliding_z)\n                end\nif  (auxiliaryData[1]==122)then\n                    --  key-z\n                    joint_all_c1=sim.getObjectHandle(joint_r[1])\n                    joint_all_c2=sim.getObjectHandle(joint_r[2])  \n                    joint_all_c3=sim.getObjectHandle(joint_r[3])\n                    joint_all_c4=sim.getObjectHandle(joint_r[4]) \n\n                    velocity=200\n                    torque=500\n                    hammer_back = 0\nend                    \n                if  (auxiliaryData[1]==120)then\n                     --  key-x\n                    joint_all_c1=sim.getObjectHandle(joint_r[1])\n                    joint_all_c2=sim.getObjectHandle(joint_r[2])  \n                    joint_all_c3=sim.getObjectHandle(joint_r[3])\n                    joint_all_c4=sim.getObjectHandle(joint_r[4]) \n\n                    velocity=200\n                    torque=-500\n                    hammer_back = 0\nend                    \n             end\n                message,auxiliaryData=sim.getSimulatorMessage()\n        end\n\n            -- We take care of setting the desired hammer position:\nif hammer_back == 1\n            then \n            sim.setJointTargetPosition(joint_all_c1, velocity)\n            sim.setJointTargetPosition(joint_all_c2, velocity)\n            sim.setJointTargetPosition(joint_all_c3, velocity)\n            sim.setJointTargetPosition(joint_all_c4, velocity)\n            --sim.setObjectPosition(hammer, -1, position)\n        end\n            sim.setJointTargetPosition(joint_all_c1, velocity)\n            sim.setJointTargetPosition(joint_all_c2, velocity)\n            sim.setJointTargetPosition(joint_all_c3, velocity)\n            sim.setJointTargetPosition(joint_all_c4, velocity)\n            --sim.setJointForce(joint,torque)\n            sim.setJointTargetPosition(slider_x, sliding_x)\n            sim.setJointTargetPosition(slider_y, sliding_y)\n            sim.setJointTargetPosition(slider_z, sliding_z)\n            --Since this script is threaded, don't waste time here:\n            sim.switchThread() -- Resume the script at next simulation loop start\n    end\n\nend\n-- Put some initialization code here:\n-- Retrieving of some handles and setting of some initial values:\njoint_all_c1=sim.getObjectHandle(joint_r[1])\njoint_all_c2=sim.getObjectHandle(joint_r[2])\njoint_all_c3=sim.getObjectHandle(joint_r[3])\njoint_all_c4=sim.getObjectHandle(joint_r[4])\nslider_x=sim.getObjectHandle(slider_x)\nslider_y=sim.getObjectHandle(slider_y)\nslider_z=sim.getObjectHandle(slider_z)\nvelocity=0\nhammer_back=0\ntorque=0\nhammer_back=0\nsliding_x = 0\nsliding_y = 0\nsliding_z = 0\norientation=sim.getJointPosition(joint_all_c1, -1)\n-- Here we execute the regular thread code:\nres,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)\nif not res then\n    sim.addStatusbarMessage('Lua runtime error: '..err)\nend\n \n-- Put some clean-up code here: \n", 'tags': '', 'url': '版本2 - X Y軸作動+開爪.html'}]};